# 面向对象
class 类名():  #定义类
	姓名=''   #变量
	年龄=0

	def 实例方法(self):
		print(f'你的名字是{self.姓名}')
		print(f'你的年龄是{self.年龄}')

对象名=类名()    #创建对象
对象名.实例方法()  #实例化对象

#类中的特征即属性就是变量,行为即方法就是函数

class 类名():
	def __init__(self,姓名,年龄):
		#添加实例属性
		self.姓名=姓名
		self.年龄=年龄

	def 实例方法(self):
		print(f'你的姓名是{self.姓名}')
		print(f'你的年龄是{self.年龄}')

对象1=类名('王道',20)#创建对象
对象1.实例方法()#调用实例方法

对象2=类名('王三思',20)
对象2.实例方法()

class 月饼():
	def __init__(self):
		#烤的时间
		self.时间=0
		#烧烤状态
		self.状态='生'
		#调料列表
		self.调料=[]
	#烘培时间
	def 烘培时间(self,时间):
		#先计算月饼整体烤的时间
		self.时间+=时间
		#用整体烤过的时间在判断
		if 0<=self.时间<3:
			self.状态='生的'
		elif 3<=self.时间<5:
			self.状态='半生不熟'
		elif 5<=self.时间<8:
			self.状态='熟了'
		else:
			self.状态='烤糊了'
	def 添加调料(self,调料):
		self.调料.extend(调料)
	#书写str的魔法方法用于输出对象的状态
	def __str__(self):
		return f'这批月饼被烤过的时间是{self.时间}分钟,状态是{self.状态},调料有{self.调料}'

#对象名=类名()#创建对象
#对象名.实例方法()#实例化对象
对象名=月饼()
对象名.烘培时间(2)
对象名.添加调料(['蔓越莓','大香蕉','桃子'])
print(对象名)
对象名.烘培时间(4)
对象名.添加调料(['蛋黄','蛋液'])
print(对象名)
